var searchIndex = {};
searchIndex["divbuf"] = {"doc":"Recursively divisible buffer class","items":[[3,"DivBufShared","divbuf","The \"entry point\" to the `divbuf` crate.",null,null],[3,"DivBuf","","Provides read-only access to a buffer.",null,null],[3,"DivBufMut","","Provides read-write access to a buffer",null,null],[11,"fmt","","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"capacity","","Returns the number of bytes the buffer can hold without reallocating.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `DivBufShared` has length 0",0,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Returns the number of bytes contained in this buffer.",0,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"try","","Try to create a read-only [`DivBuf`] that refers to the entirety of this buffer.  Will fail if there are any [`DivBufMut`] objects referring to this buffer.",0,{"inputs":[{"name":"self"}],"output":{"generics":["divbuf","str"],"name":"result"}}],[11,"try_mut","","Try to create a mutable `DivBufMt` that refers to the entirety of this buffer.  Will fail if there are any [`DivBufMut`] or [`DivBuf`] objects referring to this buffer.",0,{"inputs":[{"name":"self"}],"output":{"generics":["divbufmut","str"],"name":"result"}}],[11,"with_capacity","","Creates a new, empty, `DivBufShared` with a specified capacity.",0,{"inputs":[{"name":"usize"}],"output":{"name":"self"}}],[11,"drop","","",0,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",0,null],[11,"from","","",0,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"divbufshared"}}],[11,"into_chunks","","Break the buffer up into equal sized chunks",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"is_empty","","Returns true if the `DivBuf` has length 0",1,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Get the length of this `DivBuf`, not the underlying storage",1,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"slice","","Create a new DivBuf that spans a subset of this one.",1,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"divbuf"}}],[11,"slice_from","","Creates a new DivBuf that spans a subset of this one, including the end",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"divbuf"}}],[11,"slice_to","","Creates a new DivBuf that spans a subset of self, including the beginning",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"divbuf"}}],[11,"split_off","","Splits the DivBuf into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"divbuf"}}],[11,"split_to","","Splits the DivBuf into two at the given index.",1,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"divbuf"}}],[11,"try_mut","","Attempt to upgrade Self to a writable DivBufMut",1,{"inputs":[{"name":"self"}],"output":{"generics":["divbufmut","divbuf"],"name":"result"}}],[11,"unsplit","","Combine splitted DivBuf objects back into a contiguous single",1,{"inputs":[{"name":"self"},{"name":"divbuf"}],"output":{"generics":["divbuf"],"name":"result"}}],[11,"as_ref","","",1,null],[11,"borrow","","",1,null],[11,"hash","","",1,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"deref","","",1,null],[11,"clone","","",1,{"inputs":[{"name":"self"}],"output":{"name":"divbuf"}}],[11,"drop","","",1,{"inputs":[{"name":"self"}],"output":null}],[11,"from","","",1,{"inputs":[{"name":"divbufmut"}],"output":{"name":"divbuf"}}],[11,"cmp","","",1,{"inputs":[{"name":"self"},{"name":"divbuf"}],"output":{"name":"ordering"}}],[11,"eq","","",1,{"inputs":[{"name":"self"},{"name":"divbuf"}],"output":{"name":"bool"}}],[11,"eq","","",1,null],[11,"partial_cmp","","",1,{"inputs":[{"name":"self"},{"name":"divbuf"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"freeze","","Downgrade this `DivBufMut` into a read-only `DivBuf`",2,{"inputs":[{"name":"self"}],"output":{"name":"divbuf"}}],[11,"into_chunks","","Break the buffer up into equal sized chunks",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunksmut"}}],[11,"is_empty","","Returns true if the `DivBufMut` has length 0",2,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"len","","Get the length of this `DivBuf`, not the underlying storage",2,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more bytes to be inserted into the buffer.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"split_off","","Splits the DivBufMut into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"divbufmut"}}],[11,"split_to","","Splits the DivBufMut into two at the given index.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"divbufmut"}}],[11,"try_extend","","Attempt to extend this `DivBufMut` with bytes from the provided iterator.",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["str"],"name":"result"}}],[11,"try_resize","","Attempt to resize this `DivBufMut` in-place.",2,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"u8"}],"output":{"generics":["str"],"name":"result"}}],[11,"try_truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",2,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"generics":["str"],"name":"result"}}],[11,"unsplit","","Combine splitted DivBufMut objects back into a contiguous single",2,{"inputs":[{"name":"self"},{"name":"divbufmut"}],"output":{"generics":["divbufmut"],"name":"result"}}],[11,"as_ref","","",2,null],[11,"borrow","","",2,null],[11,"borrow_mut","","",2,null],[11,"deref","","",2,null],[11,"deref_mut","","",2,null],[11,"drop","","",2,{"inputs":[{"name":"self"}],"output":null}],[11,"extend","","",2,{"inputs":[{"name":"self"},{"name":"t"}],"output":null}],[11,"hash","","",2,{"inputs":[{"name":"self"},{"name":"h"}],"output":null}],[11,"cmp","","",2,{"inputs":[{"name":"self"},{"name":"divbufmut"}],"output":{"name":"ordering"}}],[11,"eq","","",2,{"inputs":[{"name":"self"},{"name":"divbufmut"}],"output":{"name":"bool"}}],[11,"eq","","",2,null],[11,"partial_cmp","","",2,{"inputs":[{"name":"self"},{"name":"divbufmut"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"write","","",2,null],[11,"write_all","","",2,null],[11,"flush","","",2,{"inputs":[{"name":"self"}],"output":{"name":"result"}}]],"paths":[[3,"DivBufShared"],[3,"DivBuf"],[3,"DivBufMut"]]};
initSearch(searchIndex);
